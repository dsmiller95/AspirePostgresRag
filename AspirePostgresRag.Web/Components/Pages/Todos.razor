@page "/todos"
@using AspirePostgresRag.Models.TodoItems
@rendermode InteractiveServer

@inject TodoApiClient TodoApi
@inject ILogger<Todos> Logger

<PageTitle>Todos</PageTitle>

<h1>Todo</h1>

<p>This component demonstrates showing data loaded and saved to postgres.</p>

@if (todos == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Completed</th>
        </tr>
        </thead>
        
        <tbody>
        <tr>
            <td><InputText @bind-Value="@draft.Title"></InputText></td>
            <td><button @onclick="CreateTodoClicked">Create</button></td>
        </tr>
        @foreach (var todo in todos.OrderBy(x => x.Id))
        {
            <tr>
                <td>@todo.Title</td>
                <td>
                    <input id="@todo.Id" type="checkbox"
                       checked="@todo.IsCompleted"
                       disabled="@pendingUpdates.Contains(todo.Id)"
                       @onchange="@((e) => OnCheckboxChange(e, todo))"
                    />
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private TodoItem[]? todos;
    private TodoDraft draft = new TodoDraft();
    private HashSet<int> pendingUpdates = new HashSet<int>();

    private class TodoDraft
    {
        public string Title { get; set; } = "enter todo here";
    }

    protected override async Task OnInitializedAsync()
    {
        todos = await TodoApi.GetAll();
        Logger.LogInformation("Loaded {Count} todos", todos.Length);
    }
    
    private async Task CreateTodoClicked()
    {
        if (string.IsNullOrWhiteSpace(draft.Title)) return;

        var newItem = new CreateTodoItem(draft.Title, false);
        await TodoApi.Create(newItem);
        draft = new TodoDraft();
        todos = await TodoApi.GetAll();
    }
    
    private async Task OnCheckboxChange(ChangeEventArgs e, TodoItem item)
    {
        if (e.Value is not bool newCompleted) return;

        pendingUpdates.Add(item.Id);
        StateHasChanged();
        try
        {
            var newItem = new UpdateTodoItemCompleted(newCompleted);
            await TodoApi.UpdateCompleted(item.Id, newItem);
            todos = await TodoApi.GetAll();
        }
        finally
        {
            pendingUpdates.Remove(item.Id);
            StateHasChanged();
        }
    }
}
